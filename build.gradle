buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.7.1'
    }
}

subprojects {

    repositories {
        mavenCentral()
    }

    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'codenarc'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'com.github.spotbugs'

    dependencies {
        compile 'org.codehaus.groovy:groovy-all:2.5.0'
        compile 'org.spockframework:spock-core:1.3-groovy-2.5'
        testCompile 'org.spockframework:spock-spring:1.3-groovy-2.5'
        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'org.hamcrest:hamcrest-core:1.3' // only necessary if Hamcrest matchers are used
        testRuntime 'net.bytebuddy:byte-buddy:1.8.21' // allows mocking of classes (in addition to interfaces)
        testRuntime 'org.objenesis:objenesis:2.6'
    }

    pmd {
        toolVersion = '6.13.0'
        ruleSetFiles = rootProject.files('config/pmd/ruleset.xml')
        ruleSets = []
    }

    tasks.withType(Pmd) {
        reports {
            xml.enabled = false
            html.enabled = true
            consoleOutput = true
        }
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    tasks.withType(CodeNarc) {
        configFile = rootProject.file('config/codenarc/ruleset.groovy')
    }

    checkstyle {
        maxWarnings = 0
        maxErrors = 0
    }

    spotbugs {
        effort = 'max'
        reportLevel = 'low'
        excludeFilter = rootProject.file('config/spotbugs/exclude.xml')
    }
}
